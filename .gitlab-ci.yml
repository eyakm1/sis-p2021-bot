cache: &global_cache
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .cache/pip
    - venv/
  policy: pull

stages:
  - install
  - build
  - lint
  - test
  - deploy

before_script:
  - source venv/bin/activate

Install dependencies:
  stage: install
  cache:
    <<: *global_cache
    policy: pull-push
  variables:
    PIP_INDEX_URL: "https://mirror.p.lksh.ru/pypi/simple"
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  before_script:
    - if [ ! -d venv ]; then python -m venv venv; fi
    - source venv/bin/activate
  script:
    - pip install -r bot/requirements.txt
    - pip install -r scraper/requirements.txt
    - pip install -r tlm/requirements.txt
    - pip install -r requirements-ci.txt

Build TLM schema:
  stage: build
  script:
    - python ci/schema/build_schema.py tlm/openapi.yaml ci/schema/openapi.json
  artifacts:
    paths:
      - ci/schema/openapi.json

.lint_python: &lint_python
  - |
    for item in ${EXCLUDED_DIRECTORIES[*]}; do
      EXCLUDED_DIRECTORIES_ARGS="$EXCLUDED_DIRECTORIES_ARGS -path $item -prune -o"
    done
  - LINTED_FILES=$(find . $EXCLUDED_DIRECTORIES_ARGS -name '*.py' -print)
  - pylint --rcfile=$CI_PROJECT_DIR/.pylintrc $LINTED_FILES

Lint Bot:
  stage: lint
  script:
    - cd bot
    - *lint_python
Lint TLM:
  stage: lint
  script:
    - cd tlm
    - EXCLUDED_DIRECTORIES=(./migrations)
    - *lint_python
Lint Ejudge scraper:
  stage: lint
  script:
    - cd scraper
    - *lint_python

Lint TLM schema:
  dependencies:
    - Build TLM schema
  stage: lint
  script:
    - cd ci/schema
    - spectral lint openapi.json

Test Python:
  stage: test
  script:
    - pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

.deploy_setup:
  stage: deploy
  cache: {}
  before_script:
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config'
    - ssh-add <(echo $SSH_PRIVATE_KEY | base64 -d)

Deploy TLM schema:
  dependencies:
    - Build TLM schema
  extends: .deploy_setup
  environment:
    name: staging
  script:
    - scp ci/schema/openapi.json deployer@$SSH_SCHEMA_HOST:$SCHEMA_DEPLOY_PATH
  only:
    - main
    - prod

.deploy_components:
  extends: .deploy_setup
  script:
    - cd ci/ansible
    - source config.$CI_ENVIRONMENT_NAME.sh
    - ansible-playbook -i $SSH_HOST, deploy.yml

Deploy staging:
  extends: .deploy_components
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_COMMIT_BRANCH == "deployment"
      when: manual
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_BRANCH != "deployment"
      when: never

Deploy prod:
  extends: .deploy_components
  environment:
    name: production
  only:
    - prod
